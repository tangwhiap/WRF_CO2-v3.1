#!/usr/bin/env python
# FFDAS.py
# functions to regrid / process FFDAS for WRF-Chem
# C. Martin - 4/2017
#from . import ScaleTime
import datetime as dt
import netCDF4 as nc
import numpy as np
from scipy import interpolate
from pdb import set_trace
#from API_code import _config

UserDefined_interpolate = False
interpolate_method = "linear"

def interface(Time,DataDir,wrfdom):
    """
    function to regrid FFDAS emissions

    EmissDir - string to root emissions directoyr
    Time - datetime object of current time to process
    wrfdom - dictionary containing WRF domain information
    """
    DataDir = DataDir.strip().split(":")
    #print("AuxDir: ", DataDir[1].strip())
    #FFDASDir = EmissDir+'/FFDAS/V2.2/Processed'
    wrf_day = Time.weekday()
    ### Time is the WRF valid time, but we want to compute the date/time that is most applicable ie. day of week
    try:
        ffdastime = Time.replace(year=2015) # new FFDAS is from 2015    
    except ValueError: # if Time is on 2/29
        ffdastime = Time.replace(year=2015,month=3,day=1) # day of week consistency would mean it should be the next day

    ffdas_day = ffdastime.weekday()
    daydt = wrf_day - ffdas_day
    if daydt > 3:
       daydt = daydt - 7
    elif daydt < -3:
       daydt = daydt + 7
    ffdastime = ffdastime + dt.timedelta(days=daydt)

    ## determine the input file to read based off of ffdastime
    infile = DataDir[0].strip()+'/d'+ffdastime.strftime("%j")+'.nc'
    # read in input netCDF file
    datain = nc.Dataset(infile,'r')
    ## determine the time slice to regrid
    t = ffdastime.hour
    # get input lat and lon
    lat1 = datain.variables['latitude'][:]
    lon1 = datain.variables['longitude'][:]
    # indices of data within WRF domain
    lat_inds = np.where(( lat1 >= wrfdom['lat_s']-4.9) & (lat1 <= wrfdom['lat_n']+4.9))
    lon_inds = np.where(( lon1 >= wrfdom['lon_w']-8.9) & (lon1 <= wrfdom['lon_e']+4.9))
    # subset the data
    flux = datain.variables['flux'][:]
    fluxsubset = flux[t,lat_inds[0],:]
    fluxsubset = fluxsubset[:,lon_inds[0]]
    #flon = lon1[lon_inds[0]]
    #flat = lat1[lat_inds[0]]
    lons, lats = np.meshgrid(lon1[lon_inds[0]], lat1[lat_inds[0]])
    # the FFDAS data is in units kg/cell/hr
    # must convert it to mol/km^2/hr for WRF
    mass_C = 12.
#    set_trace()
    dx_long = np.gradient(lons)[1] * np.cos(np.deg2rad(lats)) * 111.320
    dy_long = np.gradient(lats)[0] * 110.574
    area_div = np.absolute(dx_long * dy_long) 
    fluxsubset = fluxsubset / area_div
    fluxsubset = fluxsubset * 1000. / mass_C


    dic = {"lon" : lons.flatten().filled(np.nan), "lat" : lats.flatten().filled(np.nan), "value" : fluxsubset.flatten().filled(np.nan)}
    #print(dic)
   # set_trace()
    return dic

"""
    # set up the regridded data
    newflux = np.zeros((len(wrfdom['latwrf'][:,0]),len(wrfdom['latwrf'][0])))
    # regrid the data
    regridded = interpolate.griddata((lons.flatten(),lats.flatten()),fluxsubset.flatten(),(wrfdom['lonwrf'],wrfdom['latwrf']),method='linear')
    newflux[:,:] = regridded
    #ScaleFac = ScaleTime.ScaleTime(ffdastime,Time)
    #newflux = newflux * ScaleFac
    return newflux
"""
